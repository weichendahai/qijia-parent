# Authenticator 及 AuthenticationStrategy
# Authenticator 的职责是验证用户帐号，是 Shiro API 中身份验证核心的入口点:
# public AuthenticationInfo authenticate(AuthenticationToken authenticationToken) throws AuthenticationException;&nbsp;
# 如果验证成功，将返回 AuthenticationInfo 验证信息;此信息中包含了身份及凭证;如果验证失败将抛出相应的 AuthenticationException 实现。
# SecurityManager 接口继承了 Authenticator，另外还有一个 ModularRealmAuthenticator 实现，
# 其委托给 多个 Realm 进行验证，验证规则通过 AuthenticationStrategy 接口指定，

# shiro 默认提供的实现:
# FirstSuccessfulStrategy:只要有一个 Realm 验证成功即可，只返回第一个 Realm 身份验证成功的认证信 息，其他的忽略;
# AtLeastOneSuccessfulStrategy:只要有一个 Realm 验证成功即可，和 FirstSuccessfulStrategy 不同，返 回所有 Realm 身份验证成功的认证信息;
# AllSuccessfulStrategy:所有 Realm 验证成功才算成功，且返回所有 Realm 身份验证成功的认证信息，如果 有一个失败就失败了。
# ModularRealmAuthenticator 默认使用 AtLeastOneSuccessfulStrategy 策略。

# 指定 SecurityManager的authenticator实现
authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator
securityManager.authenticator=$authenticator


# 指定securityManager authenticator的authenticator strategy 策略
allSuccessfulStrategy=org.apache.shiro.authc.pam.AllSuccessfulStrategy
securityManager.authenticator.authenticationStrategy=$allSuccessfulStrategy

# 指定shiro realm
myRealmFirst=com.qiia.realm.MyRealmFirst
# myRealmSecond=com.qiia.realm.MyRealmSecond
# securityManager.realms=$myRealmFirst,$myRealmSecond
securityManager.realms=$myRealmFirst